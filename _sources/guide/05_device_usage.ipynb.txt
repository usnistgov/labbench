{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Device objects\n",
    "A series of short working examples here illustrate the use of labbench `Device` classes for experiment automation. The python programming interface is in the module of the same name, but it is convenient to import it as `lb` for shorthand."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import labbench as lb\n",
    "lb.show_messages('debug')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Laboratory automation wrappers are implemented as classes derived from `lb.Device`. All of them share common basic types features designed to make their usage discoverable and convenient. The goal here is to show how to navigate these objects to get started quickly automating lab tasks. \n",
    "\n",
    "Wrappers for specific instruments are not included with `labbench`, only low-level python plumbing and utility functions to streamline lab automation. Specific implementation is left for other libraries.\n",
    "\n",
    "## Overview\n",
    "\n",
    "The `Device` class and subclasses represent in a sense only a definition with instructions for automating a specified type of lab tool. To bring these to life and control objects in the lab, the most general steps are to\n",
    "\n",
    "1. construct an object from the class,\n",
    "\n",
    "2. open a connection, and then\n",
    "\n",
    "3. use the object's attributes to perform automation tasks as needed.\n",
    "\n",
    "Let's start with a simple automation demo for a simple 2 instrument experiment. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[1;30m DEBUG \u001b[0m \u001b[32m2021-05-27 12:30:37.611\u001b[0m • \u001b[34mPowerSupply('USB::0x1111::0x2222::0x2468::INSTR'):\u001b[0m \u001b[32mopened\u001b[0m\n",
      "\u001b[1;30m DEBUG \u001b[0m \u001b[32m2021-05-27 12:30:37.612\u001b[0m • \u001b[34mSpectrumAnalyzer('GPIB::15::INSTR'):\u001b[0m \u001b[32mopened\u001b[0m\n",
      "\u001b[1;30m DEBUG \u001b[0m \u001b[32m2021-05-27 12:30:37.612\u001b[0m • \u001b[34mPowerSupply('USB::0x1111::0x2222::0x2468::INSTR'):\u001b[0m \u001b[32mwrite \"':VOLT:IMM:AMPL 5.0'\"\u001b[0m\n",
      "\u001b[1;30m DEBUG \u001b[0m \u001b[32m2021-05-27 12:30:37.613\u001b[0m • \u001b[34mPowerSupply('USB::0x1111::0x2222::0x2468::INSTR'):\u001b[0m \u001b[32mwrite \"'OUTP 1'\"\u001b[0m\n",
      "\u001b[1;30m DEBUG \u001b[0m \u001b[32m2021-05-27 12:30:37.614\u001b[0m • \u001b[34mSpectrumAnalyzer('GPIB::15::INSTR'):\u001b[0m \u001b[32mquery_ascii_values 'TRACE?'\u001b[0m\n",
      "\u001b[1;30m DEBUG \u001b[0m \u001b[32m2021-05-27 12:30:37.621\u001b[0m • \u001b[34mSpectrumAnalyzer('GPIB::15::INSTR'):\u001b[0m \u001b[32m      -> (DataFrame with shape (201, 1))\u001b[0m\n",
      "\u001b[1;30m DEBUG \u001b[0m \u001b[32m2021-05-27 12:30:37.637\u001b[0m • \u001b[34mSpectrumAnalyzer('GPIB::15::INSTR'):\u001b[0m \u001b[32mclosed\u001b[0m\n",
      "\u001b[1;30m DEBUG \u001b[0m \u001b[32m2021-05-27 12:30:37.638\u001b[0m • \u001b[34mPowerSupply('USB::0x1111::0x2222::0x2468::INSTR'):\u001b[0m \u001b[32mclosed\u001b[0m\n",
      "USBInstrument at USB0::0x1111::0x2222::0x2468::0::INSTR @sim '\\n'\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\r\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\r\n",
       "  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n",
       "<!-- Created with matplotlib (https://matplotlib.org/) -->\r\n",
       "<svg height=\"248.518125pt\" version=\"1.1\" viewBox=\"0 0 383.667187 248.518125\" width=\"383.667187pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n",
       " <metadata>\r\n",
       "  <rdf:RDF xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\r\n",
       "   <cc:Work>\r\n",
       "    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\r\n",
       "    <dc:date>2021-05-27T12:30:38.125052</dc:date>\r\n",
       "    <dc:format>image/svg+xml</dc:format>\r\n",
       "    <dc:creator>\r\n",
       "     <cc:Agent>\r\n",
       "      <dc:title>Matplotlib v3.3.2, https://matplotlib.org/</dc:title>\r\n",
       "     </cc:Agent>\r\n",
       "    </dc:creator>\r\n",
       "   </cc:Work>\r\n",
       "  </rdf:RDF>\r\n",
       " </metadata>\r\n",
       " <defs>\r\n",
       "  <style type=\"text/css\">*{stroke-linecap:butt;stroke-linejoin:round;}</style>\r\n",
       " </defs>\r\n",
       " <g id=\"figure_1\">\r\n",
       "  <g id=\"patch_1\">\r\n",
       "   <path d=\"M 0 248.518125 \r\n",
       "L 383.667187 248.518125 \r\n",
       "L 383.667187 0 \r\n",
       "L 0 0 \r\n",
       "z\r\n",
       "\" style=\"fill:none;\"/>\r\n",
       "  </g>\r\n",
       "  <g id=\"axes_1\">\r\n",
       "   <g id=\"patch_2\">\r\n",
       "    <path d=\"M 41.667188 224.64 \r\n",
       "L 376.467188 224.64 \r\n",
       "L 376.467188 7.2 \r\n",
       "L 41.667188 7.2 \r\n",
       "z\r\n",
       "\" style=\"fill:#ffffff;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"matplotlib.axis_1\">\r\n",
       "    <g id=\"xtick_1\">\r\n",
       "     <g id=\"line2d_1\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 0 0 \r\n",
       "L 0 3.5 \r\n",
       "\" id=\"me1cc0a5993\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n",
       "      </defs>\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"56.885369\" xlink:href=\"#me1cc0a5993\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_1\">\r\n",
       "      <!-- 0 -->\r\n",
       "      <g transform=\"translate(53.704119 239.238438)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 31.78125 66.40625 \r\n",
       "Q 24.171875 66.40625 20.328125 58.90625 \r\n",
       "Q 16.5 51.421875 16.5 36.375 \r\n",
       "Q 16.5 21.390625 20.328125 13.890625 \r\n",
       "Q 24.171875 6.390625 31.78125 6.390625 \r\n",
       "Q 39.453125 6.390625 43.28125 13.890625 \r\n",
       "Q 47.125 21.390625 47.125 36.375 \r\n",
       "Q 47.125 51.421875 43.28125 58.90625 \r\n",
       "Q 39.453125 66.40625 31.78125 66.40625 \r\n",
       "z\r\n",
       "M 31.78125 74.21875 \r\n",
       "Q 44.046875 74.21875 50.515625 64.515625 \r\n",
       "Q 56.984375 54.828125 56.984375 36.375 \r\n",
       "Q 56.984375 17.96875 50.515625 8.265625 \r\n",
       "Q 44.046875 -1.421875 31.78125 -1.421875 \r\n",
       "Q 19.53125 -1.421875 13.0625 8.265625 \r\n",
       "Q 6.59375 17.96875 6.59375 36.375 \r\n",
       "Q 6.59375 54.828125 13.0625 64.515625 \r\n",
       "Q 19.53125 74.21875 31.78125 74.21875 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-48\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_2\">\r\n",
       "     <g id=\"line2d_2\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"94.930824\" xlink:href=\"#me1cc0a5993\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_2\">\r\n",
       "      <!-- 25 -->\r\n",
       "      <g transform=\"translate(88.568324 239.238438)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 19.1875 8.296875 \r\n",
       "L 53.609375 8.296875 \r\n",
       "L 53.609375 0 \r\n",
       "L 7.328125 0 \r\n",
       "L 7.328125 8.296875 \r\n",
       "Q 12.9375 14.109375 22.625 23.890625 \r\n",
       "Q 32.328125 33.6875 34.8125 36.53125 \r\n",
       "Q 39.546875 41.84375 41.421875 45.53125 \r\n",
       "Q 43.3125 49.21875 43.3125 52.78125 \r\n",
       "Q 43.3125 58.59375 39.234375 62.25 \r\n",
       "Q 35.15625 65.921875 28.609375 65.921875 \r\n",
       "Q 23.96875 65.921875 18.8125 64.3125 \r\n",
       "Q 13.671875 62.703125 7.8125 59.421875 \r\n",
       "L 7.8125 69.390625 \r\n",
       "Q 13.765625 71.78125 18.9375 73 \r\n",
       "Q 24.125 74.21875 28.421875 74.21875 \r\n",
       "Q 39.75 74.21875 46.484375 68.546875 \r\n",
       "Q 53.21875 62.890625 53.21875 53.421875 \r\n",
       "Q 53.21875 48.921875 51.53125 44.890625 \r\n",
       "Q 49.859375 40.875 45.40625 35.40625 \r\n",
       "Q 44.1875 33.984375 37.640625 27.21875 \r\n",
       "Q 31.109375 20.453125 19.1875 8.296875 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-50\"/>\r\n",
       "        <path d=\"M 10.796875 72.90625 \r\n",
       "L 49.515625 72.90625 \r\n",
       "L 49.515625 64.59375 \r\n",
       "L 19.828125 64.59375 \r\n",
       "L 19.828125 46.734375 \r\n",
       "Q 21.96875 47.46875 24.109375 47.828125 \r\n",
       "Q 26.265625 48.1875 28.421875 48.1875 \r\n",
       "Q 40.625 48.1875 47.75 41.5 \r\n",
       "Q 54.890625 34.8125 54.890625 23.390625 \r\n",
       "Q 54.890625 11.625 47.5625 5.09375 \r\n",
       "Q 40.234375 -1.421875 26.90625 -1.421875 \r\n",
       "Q 22.3125 -1.421875 17.546875 -0.640625 \r\n",
       "Q 12.796875 0.140625 7.71875 1.703125 \r\n",
       "L 7.71875 11.625 \r\n",
       "Q 12.109375 9.234375 16.796875 8.0625 \r\n",
       "Q 21.484375 6.890625 26.703125 6.890625 \r\n",
       "Q 35.15625 6.890625 40.078125 11.328125 \r\n",
       "Q 45.015625 15.765625 45.015625 23.390625 \r\n",
       "Q 45.015625 31 40.078125 35.4375 \r\n",
       "Q 35.15625 39.890625 26.703125 39.890625 \r\n",
       "Q 22.75 39.890625 18.8125 39.015625 \r\n",
       "Q 14.890625 38.140625 10.796875 36.28125 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-53\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-50\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-53\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_3\">\r\n",
       "     <g id=\"line2d_3\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"132.976278\" xlink:href=\"#me1cc0a5993\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_3\">\r\n",
       "      <!-- 50 -->\r\n",
       "      <g transform=\"translate(126.613778 239.238438)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-53\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_4\">\r\n",
       "     <g id=\"line2d_4\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"171.021733\" xlink:href=\"#me1cc0a5993\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_4\">\r\n",
       "      <!-- 75 -->\r\n",
       "      <g transform=\"translate(164.659233 239.238438)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 8.203125 72.90625 \r\n",
       "L 55.078125 72.90625 \r\n",
       "L 55.078125 68.703125 \r\n",
       "L 28.609375 0 \r\n",
       "L 18.3125 0 \r\n",
       "L 43.21875 64.59375 \r\n",
       "L 8.203125 64.59375 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-55\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-55\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-53\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_5\">\r\n",
       "     <g id=\"line2d_5\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"209.067188\" xlink:href=\"#me1cc0a5993\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_5\">\r\n",
       "      <!-- 100 -->\r\n",
       "      <g transform=\"translate(199.523438 239.238438)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 12.40625 8.296875 \r\n",
       "L 28.515625 8.296875 \r\n",
       "L 28.515625 63.921875 \r\n",
       "L 10.984375 60.40625 \r\n",
       "L 10.984375 69.390625 \r\n",
       "L 28.421875 72.90625 \r\n",
       "L 38.28125 72.90625 \r\n",
       "L 38.28125 8.296875 \r\n",
       "L 54.390625 8.296875 \r\n",
       "L 54.390625 0 \r\n",
       "L 12.40625 0 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-49\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-49\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_6\">\r\n",
       "     <g id=\"line2d_6\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"247.112642\" xlink:href=\"#me1cc0a5993\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_6\">\r\n",
       "      <!-- 125 -->\r\n",
       "      <g transform=\"translate(237.568892 239.238438)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-49\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-50\"/>\r\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-53\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_7\">\r\n",
       "     <g id=\"line2d_7\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"285.158097\" xlink:href=\"#me1cc0a5993\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_7\">\r\n",
       "      <!-- 150 -->\r\n",
       "      <g transform=\"translate(275.614347 239.238438)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-49\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-53\"/>\r\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_8\">\r\n",
       "     <g id=\"line2d_8\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"323.203551\" xlink:href=\"#me1cc0a5993\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_8\">\r\n",
       "      <!-- 175 -->\r\n",
       "      <g transform=\"translate(313.659801 239.238438)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-49\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-55\"/>\r\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-53\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"xtick_9\">\r\n",
       "     <g id=\"line2d_9\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"361.249006\" xlink:href=\"#me1cc0a5993\" y=\"224.64\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_9\">\r\n",
       "      <!-- 200 -->\r\n",
       "      <g transform=\"translate(351.705256 239.238438)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-50\"/>\r\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "   <g id=\"matplotlib.axis_2\">\r\n",
       "    <g id=\"ytick_1\">\r\n",
       "     <g id=\"line2d_10\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M 0 0 \r\n",
       "L -3.5 0 \r\n",
       "\" id=\"m070648fd47\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n",
       "      </defs>\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"41.667188\" xlink:href=\"#m070648fd47\" y=\"201.125576\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_10\">\r\n",
       "      <!-- −100 -->\r\n",
       "      <g transform=\"translate(7.2 204.924795)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 10.59375 35.5 \r\n",
       "L 73.1875 35.5 \r\n",
       "L 73.1875 27.203125 \r\n",
       "L 10.59375 27.203125 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-8722\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-8722\"/>\r\n",
       "       <use x=\"83.789062\" xlink:href=\"#DejaVuSans-49\"/>\r\n",
       "       <use x=\"147.412109\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "       <use x=\"211.035156\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_2\">\r\n",
       "     <g id=\"line2d_11\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"41.667188\" xlink:href=\"#m070648fd47\" y=\"155.115091\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_11\">\r\n",
       "      <!-- −80 -->\r\n",
       "      <g transform=\"translate(13.5625 158.91431)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 31.78125 34.625 \r\n",
       "Q 24.75 34.625 20.71875 30.859375 \r\n",
       "Q 16.703125 27.09375 16.703125 20.515625 \r\n",
       "Q 16.703125 13.921875 20.71875 10.15625 \r\n",
       "Q 24.75 6.390625 31.78125 6.390625 \r\n",
       "Q 38.8125 6.390625 42.859375 10.171875 \r\n",
       "Q 46.921875 13.96875 46.921875 20.515625 \r\n",
       "Q 46.921875 27.09375 42.890625 30.859375 \r\n",
       "Q 38.875 34.625 31.78125 34.625 \r\n",
       "z\r\n",
       "M 21.921875 38.8125 \r\n",
       "Q 15.578125 40.375 12.03125 44.71875 \r\n",
       "Q 8.5 49.078125 8.5 55.328125 \r\n",
       "Q 8.5 64.0625 14.71875 69.140625 \r\n",
       "Q 20.953125 74.21875 31.78125 74.21875 \r\n",
       "Q 42.671875 74.21875 48.875 69.140625 \r\n",
       "Q 55.078125 64.0625 55.078125 55.328125 \r\n",
       "Q 55.078125 49.078125 51.53125 44.71875 \r\n",
       "Q 48 40.375 41.703125 38.8125 \r\n",
       "Q 48.828125 37.15625 52.796875 32.3125 \r\n",
       "Q 56.78125 27.484375 56.78125 20.515625 \r\n",
       "Q 56.78125 9.90625 50.3125 4.234375 \r\n",
       "Q 43.84375 -1.421875 31.78125 -1.421875 \r\n",
       "Q 19.734375 -1.421875 13.25 4.234375 \r\n",
       "Q 6.78125 9.90625 6.78125 20.515625 \r\n",
       "Q 6.78125 27.484375 10.78125 32.3125 \r\n",
       "Q 14.796875 37.15625 21.921875 38.8125 \r\n",
       "z\r\n",
       "M 18.3125 54.390625 \r\n",
       "Q 18.3125 48.734375 21.84375 45.5625 \r\n",
       "Q 25.390625 42.390625 31.78125 42.390625 \r\n",
       "Q 38.140625 42.390625 41.71875 45.5625 \r\n",
       "Q 45.3125 48.734375 45.3125 54.390625 \r\n",
       "Q 45.3125 60.0625 41.71875 63.234375 \r\n",
       "Q 38.140625 66.40625 31.78125 66.40625 \r\n",
       "Q 25.390625 66.40625 21.84375 63.234375 \r\n",
       "Q 18.3125 60.0625 18.3125 54.390625 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-56\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-8722\"/>\r\n",
       "       <use x=\"83.789062\" xlink:href=\"#DejaVuSans-56\"/>\r\n",
       "       <use x=\"147.412109\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_3\">\r\n",
       "     <g id=\"line2d_12\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"41.667188\" xlink:href=\"#m070648fd47\" y=\"109.104606\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_12\">\r\n",
       "      <!-- −60 -->\r\n",
       "      <g transform=\"translate(13.5625 112.903825)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 33.015625 40.375 \r\n",
       "Q 26.375 40.375 22.484375 35.828125 \r\n",
       "Q 18.609375 31.296875 18.609375 23.390625 \r\n",
       "Q 18.609375 15.53125 22.484375 10.953125 \r\n",
       "Q 26.375 6.390625 33.015625 6.390625 \r\n",
       "Q 39.65625 6.390625 43.53125 10.953125 \r\n",
       "Q 47.40625 15.53125 47.40625 23.390625 \r\n",
       "Q 47.40625 31.296875 43.53125 35.828125 \r\n",
       "Q 39.65625 40.375 33.015625 40.375 \r\n",
       "z\r\n",
       "M 52.59375 71.296875 \r\n",
       "L 52.59375 62.3125 \r\n",
       "Q 48.875 64.0625 45.09375 64.984375 \r\n",
       "Q 41.3125 65.921875 37.59375 65.921875 \r\n",
       "Q 27.828125 65.921875 22.671875 59.328125 \r\n",
       "Q 17.53125 52.734375 16.796875 39.40625 \r\n",
       "Q 19.671875 43.65625 24.015625 45.921875 \r\n",
       "Q 28.375 48.1875 33.59375 48.1875 \r\n",
       "Q 44.578125 48.1875 50.953125 41.515625 \r\n",
       "Q 57.328125 34.859375 57.328125 23.390625 \r\n",
       "Q 57.328125 12.15625 50.6875 5.359375 \r\n",
       "Q 44.046875 -1.421875 33.015625 -1.421875 \r\n",
       "Q 20.359375 -1.421875 13.671875 8.265625 \r\n",
       "Q 6.984375 17.96875 6.984375 36.375 \r\n",
       "Q 6.984375 53.65625 15.1875 63.9375 \r\n",
       "Q 23.390625 74.21875 37.203125 74.21875 \r\n",
       "Q 40.921875 74.21875 44.703125 73.484375 \r\n",
       "Q 48.484375 72.75 52.59375 71.296875 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-54\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-8722\"/>\r\n",
       "       <use x=\"83.789062\" xlink:href=\"#DejaVuSans-54\"/>\r\n",
       "       <use x=\"147.412109\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_4\">\r\n",
       "     <g id=\"line2d_13\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"41.667188\" xlink:href=\"#m070648fd47\" y=\"63.094121\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_13\">\r\n",
       "      <!-- −40 -->\r\n",
       "      <g transform=\"translate(13.5625 66.89334)scale(0.1 -0.1)\">\r\n",
       "       <defs>\r\n",
       "        <path d=\"M 37.796875 64.3125 \r\n",
       "L 12.890625 25.390625 \r\n",
       "L 37.796875 25.390625 \r\n",
       "z\r\n",
       "M 35.203125 72.90625 \r\n",
       "L 47.609375 72.90625 \r\n",
       "L 47.609375 25.390625 \r\n",
       "L 58.015625 25.390625 \r\n",
       "L 58.015625 17.1875 \r\n",
       "L 47.609375 17.1875 \r\n",
       "L 47.609375 0 \r\n",
       "L 37.796875 0 \r\n",
       "L 37.796875 17.1875 \r\n",
       "L 4.890625 17.1875 \r\n",
       "L 4.890625 26.703125 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-52\"/>\r\n",
       "       </defs>\r\n",
       "       <use xlink:href=\"#DejaVuSans-8722\"/>\r\n",
       "       <use x=\"83.789062\" xlink:href=\"#DejaVuSans-52\"/>\r\n",
       "       <use x=\"147.412109\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "    <g id=\"ytick_5\">\r\n",
       "     <g id=\"line2d_14\">\r\n",
       "      <g>\r\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"41.667188\" xlink:href=\"#m070648fd47\" y=\"17.083636\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "     <g id=\"text_14\">\r\n",
       "      <!-- −20 -->\r\n",
       "      <g transform=\"translate(13.5625 20.882855)scale(0.1 -0.1)\">\r\n",
       "       <use xlink:href=\"#DejaVuSans-8722\"/>\r\n",
       "       <use x=\"83.789062\" xlink:href=\"#DejaVuSans-50\"/>\r\n",
       "       <use x=\"147.412109\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "      </g>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "   <g id=\"line2d_15\">\r\n",
       "    <path clip-path=\"url(#pdea4ca713b)\" d=\"M 56.885369 179.124544 \r\n",
       "L 58.407188 168.083086 \r\n",
       "L 59.929006 187.38539 \r\n",
       "L 61.450824 162.772651 \r\n",
       "L 62.972642 174.644665 \r\n",
       "L 64.49446 197.677587 \r\n",
       "L 66.016278 163.29148 \r\n",
       "L 67.538097 166.013479 \r\n",
       "L 69.059915 178.704601 \r\n",
       "L 70.581733 175.581098 \r\n",
       "L 72.103551 160.448997 \r\n",
       "L 73.625369 179.929449 \r\n",
       "L 75.147188 195.910424 \r\n",
       "L 76.669006 160.636311 \r\n",
       "L 78.190824 173.622658 \r\n",
       "L 79.712642 165.810282 \r\n",
       "L 81.23446 165.592264 \r\n",
       "L 82.756278 163.080983 \r\n",
       "L 84.278097 173.990871 \r\n",
       "L 85.799915 177.525171 \r\n",
       "L 87.321733 159.15381 \r\n",
       "L 88.843551 155.144775 \r\n",
       "L 90.365369 191.238359 \r\n",
       "L 91.887188 181.175177 \r\n",
       "L 93.409006 196.790648 \r\n",
       "L 94.930824 172.35914 \r\n",
       "L 96.452642 182.188641 \r\n",
       "L 97.97446 161.2251 \r\n",
       "L 99.496278 173.928325 \r\n",
       "L 101.018097 164.576759 \r\n",
       "L 102.539915 196.920166 \r\n",
       "L 104.061733 170.818546 \r\n",
       "L 105.583551 188.441279 \r\n",
       "L 107.105369 162.500173 \r\n",
       "L 108.627188 180.579629 \r\n",
       "L 110.149006 178.546542 \r\n",
       "L 111.670824 171.959644 \r\n",
       "L 113.192642 166.733945 \r\n",
       "L 114.71446 171.824844 \r\n",
       "L 116.236278 160.835206 \r\n",
       "L 117.758097 202.014649 \r\n",
       "L 119.279915 163.444081 \r\n",
       "L 120.801733 184.989152 \r\n",
       "L 122.323551 196.980359 \r\n",
       "L 123.845369 196.66271 \r\n",
       "L 125.367188 170.740451 \r\n",
       "L 126.889006 163.398981 \r\n",
       "L 128.410824 165.012028 \r\n",
       "L 129.932642 185.528313 \r\n",
       "L 131.45446 169.865423 \r\n",
       "L 132.976278 164.096768 \r\n",
       "L 134.498097 176.264885 \r\n",
       "L 136.019915 183.509937 \r\n",
       "L 137.541733 203.386315 \r\n",
       "L 139.063551 166.129579 \r\n",
       "L 140.585369 177.498432 \r\n",
       "L 142.107188 202.137077 \r\n",
       "L 143.629006 181.13865 \r\n",
       "L 145.150824 193.908261 \r\n",
       "L 146.672642 177.6237 \r\n",
       "L 148.19446 181.756654 \r\n",
       "L 149.716278 168.719715 \r\n",
       "L 151.238097 163.34958 \r\n",
       "L 152.759915 174.818818 \r\n",
       "L 154.281733 170.380199 \r\n",
       "L 155.803551 169.194797 \r\n",
       "L 157.325369 165.829536 \r\n",
       "L 158.847187 175.657508 \r\n",
       "L 160.369006 163.340299 \r\n",
       "L 161.890824 182.996167 \r\n",
       "L 163.412642 161.99811 \r\n",
       "L 164.93446 172.615876 \r\n",
       "L 166.456278 188.435086 \r\n",
       "L 167.978097 192.629384 \r\n",
       "L 169.499915 184.849424 \r\n",
       "L 171.021733 171.691927 \r\n",
       "L 172.543551 184.657892 \r\n",
       "L 174.065369 169.725975 \r\n",
       "L 175.587187 193.668053 \r\n",
       "L 177.109006 163.540277 \r\n",
       "L 178.630824 186.826078 \r\n",
       "L 180.152642 202.01324 \r\n",
       "L 181.67446 175.638279 \r\n",
       "L 183.196278 210.492697 \r\n",
       "L 184.718097 173.324154 \r\n",
       "L 186.239915 202.139557 \r\n",
       "L 187.761733 156.577228 \r\n",
       "L 189.283551 179.77287 \r\n",
       "L 190.805369 17.083636 \r\n",
       "L 192.327188 167.131949 \r\n",
       "L 193.849006 186.546852 \r\n",
       "L 195.370824 194.309308 \r\n",
       "L 196.892642 168.207125 \r\n",
       "L 198.41446 179.751189 \r\n",
       "L 199.936278 170.008963 \r\n",
       "L 201.458097 188.782711 \r\n",
       "L 202.979915 180.684315 \r\n",
       "L 204.501733 178.964335 \r\n",
       "L 207.545369 162.472827 \r\n",
       "L 209.067188 180.402696 \r\n",
       "L 210.589006 167.600735 \r\n",
       "L 212.110824 184.534419 \r\n",
       "L 213.632642 178.863999 \r\n",
       "L 215.15446 166.574893 \r\n",
       "L 216.676278 170.717781 \r\n",
       "L 218.198097 177.317776 \r\n",
       "L 219.719915 168.603644 \r\n",
       "L 221.241733 159.213948 \r\n",
       "L 224.285369 192.472386 \r\n",
       "L 225.807187 194.524726 \r\n",
       "L 227.329006 151.375922 \r\n",
       "L 228.850824 183.616399 \r\n",
       "L 230.372642 176.560612 \r\n",
       "L 231.89446 182.010572 \r\n",
       "L 233.416278 163.587077 \r\n",
       "L 234.938097 205.19545 \r\n",
       "L 236.459915 177.894924 \r\n",
       "L 237.981733 169.75594 \r\n",
       "L 239.503551 165.791397 \r\n",
       "L 241.025369 176.036024 \r\n",
       "L 242.547188 165.771223 \r\n",
       "L 244.069006 173.103854 \r\n",
       "L 245.590824 166.419678 \r\n",
       "L 247.112642 183.121166 \r\n",
       "L 248.63446 183.800748 \r\n",
       "L 250.156278 168.024105 \r\n",
       "L 251.678097 159.216321 \r\n",
       "L 253.199915 198.926038 \r\n",
       "L 254.721733 179.028718 \r\n",
       "L 256.243551 179.616671 \r\n",
       "L 257.765369 182.374606 \r\n",
       "L 259.287187 198.013433 \r\n",
       "L 260.809006 169.541201 \r\n",
       "L 262.330824 169.344214 \r\n",
       "L 263.852642 171.049178 \r\n",
       "L 265.37446 169.330702 \r\n",
       "L 266.896278 192.400185 \r\n",
       "L 268.418097 166.591872 \r\n",
       "L 269.939915 163.2648 \r\n",
       "L 271.461733 186.240059 \r\n",
       "L 272.983551 176.571772 \r\n",
       "L 274.505369 169.537916 \r\n",
       "L 276.027187 177.456019 \r\n",
       "L 277.549006 178.654923 \r\n",
       "L 279.070824 160.705275 \r\n",
       "L 280.592642 152.70125 \r\n",
       "L 282.11446 166.115225 \r\n",
       "L 283.636278 191.46915 \r\n",
       "L 285.158097 190.140528 \r\n",
       "L 286.679915 168.848374 \r\n",
       "L 288.201733 169.473436 \r\n",
       "L 289.723551 177.790614 \r\n",
       "L 291.245369 213.138204 \r\n",
       "L 292.767187 173.24175 \r\n",
       "L 294.289006 162.863214 \r\n",
       "L 295.810824 178.037415 \r\n",
       "L 297.332642 163.510844 \r\n",
       "L 298.85446 169.449039 \r\n",
       "L 300.376278 170.520794 \r\n",
       "L 301.898097 189.262276 \r\n",
       "L 303.419915 179.082055 \r\n",
       "L 304.941733 189.927811 \r\n",
       "L 306.463551 194.504684 \r\n",
       "L 307.985369 177.01992 \r\n",
       "L 309.507187 178.795967 \r\n",
       "L 311.029006 171.676902 \r\n",
       "L 312.550824 161.355199 \r\n",
       "L 314.072642 178.852106 \r\n",
       "L 315.59446 175.977751 \r\n",
       "L 317.116278 158.786937 \r\n",
       "L 318.638097 167.296843 \r\n",
       "L 320.159915 177.323173 \r\n",
       "L 321.681733 168.016659 \r\n",
       "L 323.203551 203.679757 \r\n",
       "L 324.725369 167.696463 \r\n",
       "L 326.247187 175.128255 \r\n",
       "L 327.769006 160.833733 \r\n",
       "L 329.290824 179.438284 \r\n",
       "L 330.812642 191.850913 \r\n",
       "L 332.33446 176.621979 \r\n",
       "L 333.856278 166.191326 \r\n",
       "L 335.378097 162.826977 \r\n",
       "L 336.899915 165.267478 \r\n",
       "L 338.421733 166.712514 \r\n",
       "L 339.943551 166.879479 \r\n",
       "L 341.465369 180.000343 \r\n",
       "L 342.987187 176.752129 \r\n",
       "L 344.509006 180.962913 \r\n",
       "L 346.030824 189.439527 \r\n",
       "L 347.552642 173.996388 \r\n",
       "L 349.07446 197.181656 \r\n",
       "L 350.596278 181.224611 \r\n",
       "L 352.118097 178.740412 \r\n",
       "L 353.639915 214.756364 \r\n",
       "L 355.161733 175.195584 \r\n",
       "L 356.683551 203.886204 \r\n",
       "L 358.205369 167.528676 \r\n",
       "L 359.727187 200.442385 \r\n",
       "L 361.249006 161.127373 \r\n",
       "L 361.249006 161.127373 \r\n",
       "\" style=\"fill:none;stroke:#1f77b4;stroke-linecap:square;stroke-width:1.5;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_3\">\r\n",
       "    <path d=\"M 41.667188 224.64 \r\n",
       "L 41.667188 7.2 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_4\">\r\n",
       "    <path d=\"M 376.467188 224.64 \r\n",
       "L 376.467188 7.2 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_5\">\r\n",
       "    <path d=\"M 41.667188 224.64 \r\n",
       "L 376.467187 224.64 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"patch_6\">\r\n",
       "    <path d=\"M 41.667188 7.2 \r\n",
       "L 376.467187 7.2 \r\n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n",
       "   </g>\r\n",
       "   <g id=\"legend_1\">\r\n",
       "    <g id=\"patch_7\">\r\n",
       "     <path d=\"M 304.58125 29.878125 \r\n",
       "L 369.467188 29.878125 \r\n",
       "Q 371.467188 29.878125 371.467188 27.878125 \r\n",
       "L 371.467188 14.2 \r\n",
       "Q 371.467188 12.2 369.467188 12.2 \r\n",
       "L 304.58125 12.2 \r\n",
       "Q 302.58125 12.2 302.58125 14.2 \r\n",
       "L 302.58125 27.878125 \r\n",
       "Q 302.58125 29.878125 304.58125 29.878125 \r\n",
       "z\r\n",
       "\" style=\"fill:#ffffff;opacity:0.8;stroke:#cccccc;stroke-linejoin:miter;\"/>\r\n",
       "    </g>\r\n",
       "    <g id=\"line2d_16\">\r\n",
       "     <path d=\"M 306.58125 20.298437 \r\n",
       "L 326.58125 20.298437 \r\n",
       "\" style=\"fill:none;stroke:#1f77b4;stroke-linecap:square;stroke-width:1.5;\"/>\r\n",
       "    </g>\r\n",
       "    <g id=\"line2d_17\"/>\r\n",
       "    <g id=\"text_15\">\r\n",
       "     <!-- Trace0 -->\r\n",
       "     <g transform=\"translate(334.58125 23.798437)scale(0.1 -0.1)\">\r\n",
       "      <defs>\r\n",
       "       <path d=\"M -0.296875 72.90625 \r\n",
       "L 61.375 72.90625 \r\n",
       "L 61.375 64.59375 \r\n",
       "L 35.5 64.59375 \r\n",
       "L 35.5 0 \r\n",
       "L 25.59375 0 \r\n",
       "L 25.59375 64.59375 \r\n",
       "L -0.296875 64.59375 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-84\"/>\r\n",
       "       <path d=\"M 41.109375 46.296875 \r\n",
       "Q 39.59375 47.171875 37.8125 47.578125 \r\n",
       "Q 36.03125 48 33.890625 48 \r\n",
       "Q 26.265625 48 22.1875 43.046875 \r\n",
       "Q 18.109375 38.09375 18.109375 28.8125 \r\n",
       "L 18.109375 0 \r\n",
       "L 9.078125 0 \r\n",
       "L 9.078125 54.6875 \r\n",
       "L 18.109375 54.6875 \r\n",
       "L 18.109375 46.1875 \r\n",
       "Q 20.953125 51.171875 25.484375 53.578125 \r\n",
       "Q 30.03125 56 36.53125 56 \r\n",
       "Q 37.453125 56 38.578125 55.875 \r\n",
       "Q 39.703125 55.765625 41.0625 55.515625 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-114\"/>\r\n",
       "       <path d=\"M 34.28125 27.484375 \r\n",
       "Q 23.390625 27.484375 19.1875 25 \r\n",
       "Q 14.984375 22.515625 14.984375 16.5 \r\n",
       "Q 14.984375 11.71875 18.140625 8.90625 \r\n",
       "Q 21.296875 6.109375 26.703125 6.109375 \r\n",
       "Q 34.1875 6.109375 38.703125 11.40625 \r\n",
       "Q 43.21875 16.703125 43.21875 25.484375 \r\n",
       "L 43.21875 27.484375 \r\n",
       "z\r\n",
       "M 52.203125 31.203125 \r\n",
       "L 52.203125 0 \r\n",
       "L 43.21875 0 \r\n",
       "L 43.21875 8.296875 \r\n",
       "Q 40.140625 3.328125 35.546875 0.953125 \r\n",
       "Q 30.953125 -1.421875 24.3125 -1.421875 \r\n",
       "Q 15.921875 -1.421875 10.953125 3.296875 \r\n",
       "Q 6 8.015625 6 15.921875 \r\n",
       "Q 6 25.140625 12.171875 29.828125 \r\n",
       "Q 18.359375 34.515625 30.609375 34.515625 \r\n",
       "L 43.21875 34.515625 \r\n",
       "L 43.21875 35.40625 \r\n",
       "Q 43.21875 41.609375 39.140625 45 \r\n",
       "Q 35.0625 48.390625 27.6875 48.390625 \r\n",
       "Q 23 48.390625 18.546875 47.265625 \r\n",
       "Q 14.109375 46.140625 10.015625 43.890625 \r\n",
       "L 10.015625 52.203125 \r\n",
       "Q 14.9375 54.109375 19.578125 55.046875 \r\n",
       "Q 24.21875 56 28.609375 56 \r\n",
       "Q 40.484375 56 46.34375 49.84375 \r\n",
       "Q 52.203125 43.703125 52.203125 31.203125 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-97\"/>\r\n",
       "       <path d=\"M 48.78125 52.59375 \r\n",
       "L 48.78125 44.1875 \r\n",
       "Q 44.96875 46.296875 41.140625 47.34375 \r\n",
       "Q 37.3125 48.390625 33.40625 48.390625 \r\n",
       "Q 24.65625 48.390625 19.8125 42.84375 \r\n",
       "Q 14.984375 37.3125 14.984375 27.296875 \r\n",
       "Q 14.984375 17.28125 19.8125 11.734375 \r\n",
       "Q 24.65625 6.203125 33.40625 6.203125 \r\n",
       "Q 37.3125 6.203125 41.140625 7.25 \r\n",
       "Q 44.96875 8.296875 48.78125 10.40625 \r\n",
       "L 48.78125 2.09375 \r\n",
       "Q 45.015625 0.34375 40.984375 -0.53125 \r\n",
       "Q 36.96875 -1.421875 32.421875 -1.421875 \r\n",
       "Q 20.0625 -1.421875 12.78125 6.34375 \r\n",
       "Q 5.515625 14.109375 5.515625 27.296875 \r\n",
       "Q 5.515625 40.671875 12.859375 48.328125 \r\n",
       "Q 20.21875 56 33.015625 56 \r\n",
       "Q 37.15625 56 41.109375 55.140625 \r\n",
       "Q 45.0625 54.296875 48.78125 52.59375 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-99\"/>\r\n",
       "       <path d=\"M 56.203125 29.59375 \r\n",
       "L 56.203125 25.203125 \r\n",
       "L 14.890625 25.203125 \r\n",
       "Q 15.484375 15.921875 20.484375 11.0625 \r\n",
       "Q 25.484375 6.203125 34.421875 6.203125 \r\n",
       "Q 39.59375 6.203125 44.453125 7.46875 \r\n",
       "Q 49.3125 8.734375 54.109375 11.28125 \r\n",
       "L 54.109375 2.78125 \r\n",
       "Q 49.265625 0.734375 44.1875 -0.34375 \r\n",
       "Q 39.109375 -1.421875 33.890625 -1.421875 \r\n",
       "Q 20.796875 -1.421875 13.15625 6.1875 \r\n",
       "Q 5.515625 13.8125 5.515625 26.8125 \r\n",
       "Q 5.515625 40.234375 12.765625 48.109375 \r\n",
       "Q 20.015625 56 32.328125 56 \r\n",
       "Q 43.359375 56 49.78125 48.890625 \r\n",
       "Q 56.203125 41.796875 56.203125 29.59375 \r\n",
       "z\r\n",
       "M 47.21875 32.234375 \r\n",
       "Q 47.125 39.59375 43.09375 43.984375 \r\n",
       "Q 39.0625 48.390625 32.421875 48.390625 \r\n",
       "Q 24.90625 48.390625 20.390625 44.140625 \r\n",
       "Q 15.875 39.890625 15.1875 32.171875 \r\n",
       "z\r\n",
       "\" id=\"DejaVuSans-101\"/>\r\n",
       "      </defs>\r\n",
       "      <use xlink:href=\"#DejaVuSans-84\"/>\r\n",
       "      <use x=\"46.333984\" xlink:href=\"#DejaVuSans-114\"/>\r\n",
       "      <use x=\"87.447266\" xlink:href=\"#DejaVuSans-97\"/>\r\n",
       "      <use x=\"148.726562\" xlink:href=\"#DejaVuSans-99\"/>\r\n",
       "      <use x=\"203.707031\" xlink:href=\"#DejaVuSans-101\"/>\r\n",
       "      <use x=\"265.230469\" xlink:href=\"#DejaVuSans-48\"/>\r\n",
       "     </g>\r\n",
       "    </g>\r\n",
       "   </g>\r\n",
       "  </g>\r\n",
       " </g>\r\n",
       " <defs>\r\n",
       "  <clipPath id=\"pdea4ca713b\">\r\n",
       "   <rect height=\"217.44\" width=\"334.8\" x=\"41.667188\" y=\"7.2\"/>\r\n",
       "  </clipPath>\r\n",
       " </defs>\r\n",
       "</svg>\r\n"
      ],
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import labbench as lb\n",
    "import numpy as np\n",
    "from sim_visa import PowerSupply, SpectrumAnalyzer\n",
    "\n",
    "# VISA Devices take a standard address string to create a resource\n",
    "spectrum_analyzer = SpectrumAnalyzer('GPIB::15::INSTR')\n",
    "supply = PowerSupply('USB::0x1111::0x2222::0x2468::INSTR')\n",
    "\n",
    "# show SCPI traffic\n",
    "lb.show_messages('debug')\n",
    "\n",
    "# `with` blocks open the devices, then closes them afterward\n",
    "with supply, spectrum_analyzer: \n",
    "    print(supply.backend, supply._rm, repr(supply.read_termination))\n",
    "    supply.voltage = 5\n",
    "    supply.output_enabled = True\n",
    "\n",
    "    trace_dB = 10*np.log10(spectrum_analyzer.fetch_trace())\n",
    "trace_dB.plot();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These instruments are emulated - under the hood they are [pyvisa-sim](pyvisa-sim.readthedocs.io/) instruments, configured in [sim_visa.yaml], which act as simple value stores for a few fake SCPI commands and sources of \"canned\" arrays of data. The demo labbench Device classes that control them are implemented in [sim_visa.py] (subclassed from `lb.Device` -> `lb.VISADevice` -> `lb.SimulatedVISADevice`).\n",
    "\n",
    "## Workflow\n",
    "### Constructing objects\n",
    "These Device classes (like other VISA instruments) need a VISA address in order to point to a specific instrument. To discover information about this and other available initialization parameters, use python help() or the '?' magic in ipython or jupyter:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;31mInit signature:\u001b[0m\n",
      "\u001b[0mSpectrumAnalyzer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m\n",
      "\u001b[0m    \u001b[0mresource\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m''\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\n",
      "\u001b[0m    \u001b[1;33m*\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\n",
      "\u001b[0m    \u001b[0mread_termination\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'\\n'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\n",
      "\u001b[0m    \u001b[0mwrite_termination\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'\\n'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\n",
      "\u001b[0m    \u001b[0msweeps\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mint\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\n",
      "\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mDocstring:\u001b[0m     \n",
      "a fake Spectrum Analyzer that returns fixed trace data\n",
      "    \n",
      "Value Attributes:\n",
      "    resource (str): VISA address string (allow_none=True)\n",
      "    read_termination (str): end of line string to expect in query replies (cache=True)\n",
      "    write_termination (str): end of line string to send after writes (cache=True)\n",
      "    sweeps (int): number of traces to acquire (min=1)\n",
      "\n",
      "Property Attributes:\n",
      "    isopen (bool): is the backend ready?\n",
      "    status_byte (dict): instrument status decoded from '*STB?' (sets=False)\n",
      "    identity (str): identity string reported by the instrument (key='*IDN',sets=False,cache=True)\n",
      "    options (str): options reported by the instrument (key='*OPT',sets=False,cache=True)\n",
      "    frequency (float): center frequency (key=':FREQ',min=10000000.0,max=18000000000.0)\n",
      "\u001b[1;31mInit docstring:\u001b[0m\n",
      "Arguments:\n",
      "    resource (str): VISA address string (allow_none=True)\n",
      "    read_termination (str): end of line string to expect in query replies (cache=True)\n",
      "    write_termination (str): end of line string to send after writes (cache=True)\n",
      "    sweeps (int): number of traces to acquire (min=1)\n",
      "\u001b[1;31mFile:\u001b[0m           c:\\users\\dkuester\\documents\\src\\labbench\\examples\\sim_visa.py\n",
      "\u001b[1;31mType:\u001b[0m           HasTraitsMeta\n",
      "\u001b[1;31mSubclasses:\u001b[0m     \n"
     ]
    }
   ],
   "source": [
    "SpectrumAnalyzer?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Other options are also available here, such as the transport settings `read_termination` and `read_termination`, or the number of traces to acquire in calls to `fetch_trace`.\n",
    "\n",
    "These can also be set or changed after object construction by setting the value attributes, for example ```spectrum_analyzer.resource = 'GPIB::15::INSTR'``` or ```supply.resource = 'USB::0x1111::0x2222::0x2468::INSTR'```. The complete list of these parameters is shown under \"Value Attributes\", which also lists read-only values that can't be changed and are not constructor arguments.\n",
    "\n",
    "### Opening device connections\n",
    "In automation scripts, it is good practice to use a context block (that `with` statement) to open connections. This ensures all of the devices open and close together, even when exceptions are raised.\n",
    "\n",
    "For interactive use on the python/ipython/jupyter prompt, this is less convenient. For this purpose, device objects also expose explicit `open` and `close` methods. As an example, a simple check for instrument response to automation could look like this, \n",
    "\n",
    "```python\n",
    ">>> supply.open()\n",
    ">>> print(supply.output_enabled)\n",
    "False\n",
    ">>> # (...look at the instrument to verify output is disabled)\n",
    ">>> supply.output_enabled = True\n",
    ">>> # (...verify instrument output is enabled)\n",
    "```\n",
    "\n",
    "This type of exploration is a good way to learn the capabilities of a device interactively.\n",
    "\n",
    "### Automating with open devices\n",
    "\n",
    "Python's introspection tools give more opportunities to discover the API exposed by a device object. This is important because the methods and other attributes vary from one type of Device class to another. The below uses `dir` to show the list of all _public_ attributes (those that don't start with `'_'`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "public attributes of SpectrumAnalyzer: ['backend', 'close', 'concurrency', 'fetch_trace', 'frequency', 'get_key', 'identity', 'isopen', 'list_resources', 'open', 'options', 'overlap_and_block', 'preset', 'query', 'query_ascii_values', 'read_termination', 'resource', 'set_key', 'status_byte', 'suppress_timeout', 'sweeps', 'wait', 'write', 'write_termination', 'yaml_source']\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;31mSignature:\u001b[0m \u001b[0mSpectrumAnalyzer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmsg\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mDocstring:\u001b[0m\n",
      "queries the device with an SCPI message and returns its reply.\n",
      "\n",
      "Handles debug logging and adjustments when in overlap_and_block\n",
      "contexts as appropriate.\n",
      "\n",
      "Arguments:\n",
      "    msg: the SCPI message to send\n",
      "\u001b[1;31mFile:\u001b[0m      c:\\users\\dkuester\\anaconda3\\lib\\site-packages\\labbench\\_backends.py\n",
      "\u001b[1;31mType:\u001b[0m      function\n"
     ]
    }
   ],
   "source": [
    "attrs = [\n",
    "    name\n",
    "    for name in dir(SpectrumAnalyzer)\n",
    "    if not name.startswith('_') # filter by name\n",
    "]\n",
    "\n",
    "print(f'public attributes of SpectrumAnalyzer: {attrs}\\n')\n",
    "\n",
    "# discover the 'query' method common to VISA all devices\n",
    "SpectrumAnalyzer.query?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Trait attributes that cast to python types with validation are definitions in classes, but become interactive values in device objects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "class: SpectrumAnalyzer.sweeps == value.int(default=1,min=1)\n",
      "object: spectrum_analyzer.sweeps == 1\n"
     ]
    }
   ],
   "source": [
    "print(f'class: SpectrumAnalyzer.sweeps == {SpectrumAnalyzer.sweeps}')\n",
    "print(f'object: spectrum_analyzer.sweeps == {signal_analyzer.sweeps}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function labbench._backends.VISADevice.open(self)>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal_analyzer.open\n",
    "SpectrumAnalyzer.open"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generalizing from the example\n",
    "Different subclasses expose different method functions and attribute variables to wrap the underling low-level API. Still, several characteristics are standardized:\n",
    "- connection management through `with` block or `open`/`close` methods\n",
    "- an `isopen` property to indicate connection status\n",
    "- `resource` is accepted by the constructor, and may be changed afterward as a class attribute\n",
    "- hooks are available for data loggers and UIs to observe automation calls\n",
    "\n",
    "\n",
    "Device subclasses for different types of instruments and software differ in\n",
    "- the types of resource and configuration information\n",
    "- the specific resource of the class provided to control the device"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This gets more complicated when handling multiple devices, because connection failures leave a combination of open and closed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    base.open()\n",
    "    visa.open() # fails because its resource doesn't exist on the host\n",
    "    \n",
    "    # we don't get this far after visa.open() raises an exception\n",
    "    print(\"doing useful automation here\")\n",
    "    visa.close()\n",
    "    base.close()\n",
    "except:    \n",
    "    # we're left with a mixture of connection states\n",
    "    assert base.isopen==True and visa.isopen==False\n",
    "\n",
    "    # ...so we have to clean up the stray connection manually :(\n",
    "    base.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Context management is easier and more clear. Everything inside the `with` block executes only if all devices open successfully, and ensures cleanup so that all devices are closed afterward."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    with base, visa: # does both base.open() and visa.open()\n",
    "        print('we never get in here, because visa.open() fails!')\n",
    "except:\n",
    "    # context management ensured a base.close() after visa.open() failed, \n",
    "    assert base.isopen==False and visa.isopen==False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "data logging, type checking,and numerical bounds validation. \n",
    "\n",
    "These features are common to all `Device` classes (and derived classes). To get started, provide  by minimum working examples. Examples will use  we'll look into the more specialized capabilities provided by other `Device` subclasses included `labbench` for often-used backend APIs like serial and VISA."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example\n",
    "Here are very fake functions that just use `time.sleep` to block. They simulate longer instrument calls (such as triggering or acquisition) that take some time to complete.\n",
    "\n",
    "Notice that `do_something_3` takes 3 arguments (and returns them), and that `do_something_4` raises an exception."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import labbench as lb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is the simplest example, where we call functions `do_something_1` and `do_something_2` that take no arguments and raise no exceptions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "start 1\n",
      "start 2\n",
      "end 1\n",
      "end 2\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'do_something_1': 1, 'do_something_2': 2}"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from labbench import concurrently\n",
    "\n",
    "results = concurrently(do_something_1, do_something_2)\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'do_something_1': 1, 'do_something_2': 2}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'do_something_1'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "do_something_1.__name__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also pass functions by wrapping the functions in `Call()`, which is a class designed for this purpose:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "start 1\n",
      "start 3\n",
      "end 1\n",
      "end 3\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'do_something_1': 1, 'do_something_3': (1, 2, 3)}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from labbench import concurrently, Call\n",
    "\n",
    "results = concurrently(do_something_1, Call(do_something_3, 1,2,c=3))\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "More than one of the functions running concurrently may raise exceptions. Tracebacks print to the screen, and by default `ConcurrentException` is also raised:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "start 4\n",
      "start 5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n",
      "  File \"<ipython-input-1-73606d5b193d>\", line 24, in do_something_4\n",
      "    raise ValueError('I had an error')\n",
      "ValueError: I had an error\n",
      "Traceback (most recent call last):\n",
      "  File \"<ipython-input-1-73606d5b193d>\", line 31, in do_something_5\n",
      "    raise IndexError('I had a different error')\n",
      "IndexError: I had a different error\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\dkuester\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3267, in run_code\n",
      "    exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "  File \"<ipython-input-6-6e564c4e58e6>\", line 3, in <module>\n",
      "    results = concurrently(do_something_4, do_something_5)\n",
      "  File \"C:\\Users\\dkuester\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\labbench\\util.py\", line 899, in concurrently\n",
      "    return concurrently_call(*objs, **kws)\n",
      "  File \"C:\\Users\\dkuester\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\labbench\\util.py\", line 600, in concurrently_call\n",
      "    f'{len(tracebacks)} call(s) raised exceptions')\n",
      "labbench.util.ConcurrentException: 2 call(s) raised exceptions\n"
     ]
    }
   ],
   "source": [
    "from labbench import concurrently, Call\n",
    "\n",
    "results = concurrently(do_something_4, do_something_5)\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "the `catch` flag changes concurrent exception handling behavior to return values of functions that did not raise exceptions (instead of raising `ConcurrentException`). The return dictionary only includes keys for functions that did not raise exceptions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "start 4\n",
      "start 1\n",
      "end 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'do_something_1': 1}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from labbench import concurrently, Call\n",
    "\n",
    "results = concurrently(do_something_4, do_something_1, catch=True)\n",
    "results"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 64-bit ('base': conda)",
   "name": "python385jvsc74a57bd0584ca3e41de69dadb90590574368a536937183574270e0c5348c810208f0dc2f"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
