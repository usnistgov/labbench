{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logging device states and test results to a database\n",
    "A number of tools are included in `labbench` to streamline acquisition of test data into a database. A couple of methods are\n",
    "\n",
    "* Automatically monitoring attributes in `state` and logging changes\n",
    "* Saving postprocessed data in the as a new column\n",
    "\n",
    "The data management supports automatic relational databasing. Common non-scalar data types (`pandas.DataFrame`, `numpy.array`, long strings, files generated outside of the data tree, etc.) are automatically stored relationally --- placed in folders and referred to in the database. Other data can be forced to be relational by dynamically generating relational databases on the fly.\n",
    "\n",
    "## File conventions\n",
    "All labbench data save functionality is implemented in tables with [pandas](pandas.pydata.org) DataFrame backends. Here are database storage formats that are supported:\n",
    "\n",
    "| Format                            | File extension(s)              | Data management class | flag to [use record file format](http://ssm.ipages.nist.gov/labbench/labbench.html#labbench.managedata.RelationalTableLogger.set_relational_file_format) | Comments |\n",
    "|:----------------------------------|:-------------------------------|:-----------------------|:------------------------|:----\n",
    "| [sqlite](sqlite.org)              | .db                            | [labbench.SQLiteLogger](http://ssm.ipages.nist.gov/labbench/labbench.html#labbench.managedata.SQLiteLogger) | 'sqlite' | Scales to larger databases than csv |\n",
    "| csv                               | .csv,.csv.gz,.csv.bz2,.csv.zip | [labbench.CSVLogger](http://ssm.ipages.nist.gov/labbench/labbench.html#labbench.managedata.CSVLogger)          |'csv'| Easy to inspect |\n",
    "\n",
    "Several formats are supported only as relational data (data stored in a file in the subdirectory instead of directly in the ). Certain types of data as values into the database manager automatically become relational data when you call the `append` method of the data manager:\n",
    "\n",
    "| Format                            | File extension(s)              | python type conversion | [set_record file format](http://ssm.ipages.nist.gov/labbench/labbench.html#labbench.managedata.RelationalTableLogger.set_relational_file_format) flag | Comments |\n",
    "|:----------------------------------|:-------------------------------|:-----------------------|:------------------------|:----\n",
    "| [feather](github.com/wesm/feather)| .f                             | iterables of numbers and strings; pd.DataFrame | 'feather' | Python 3.x only\n",
    "| [json](http://www.json.org/)      | .json                          | iterables of numbers and strings; pd.DataFrame         | 'json' | |\n",
    "| csv                               | .csv | iterables of numbers and strings; pd.DataFrame         |'csv'| |\n",
    "| python [pickle](https://docs.python.org/3/library/pickle.html) | .pickle | any | 'pickle' | fallback if the chosen relational format fails |\n",
    "| text files     | .txt | string or bytes longer than `text_relational_min` | N/A | set `text_relational_min` when you instantiate the database manager\n",
    "| arbitrary files generated outside the file tree |     *             | strings containing filesystem path | N/A |\n",
    "\n",
    "In the following example, we will use an sqlite master database, and csv record files. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example\n",
    "Here is a emulated \"dummy\" instrument. It has a few state settings similar to a simple power sensor. The state descriptors (`initiate_continuous`, `output_trigger`, etc.) are defined as local types, which means they don't trigger communication with any actual devices. The `fetch_trace` method generates a \"trace\" drawn from a uniform distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.insert(0,'..')\n",
    "import labbench as lb\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "class EmulatedInstrument(lb.EmulatedVISADevice):\n",
    "    \"\"\" This \"instrument\" makes mock data and instrument states to\n",
    "        demonstrate we can show the process of setting\n",
    "        up a measurement.\n",
    "    \"\"\"\n",
    "    class state (lb.EmulatedVISADevice.state):\n",
    "        initiate_continuous:bool = lb.property(key='INIT:CONT')\n",
    "        output_trigger:bool = lb.property(key='OUTP:TRIG')\n",
    "        sweep_aperture:float = lb.property(min=20e-6, max=200e-3,help='s')\n",
    "        frequency:float = lb.property(min=10e6, max=18e9,step=1e-3,help='Hz')\n",
    "\n",
    "    def trigger(self):\n",
    "        \"\"\" This would tell the instrument to start a measurement\n",
    "        \"\"\"\n",
    "        pass\n",
    "    \n",
    "    def fetch_trace(self, N=1001):\n",
    "        \"\"\" Generate N points of junk data as a pandas series.\n",
    "        \"\"\"\n",
    "        values = np.random.normal(size=N)\n",
    "        index = np.linspace(0,self.state.sweep_aperture,N)\n",
    "        series = pd.Series(values,index=index,name='voltage')\n",
    "        series.index.name = 'time'\n",
    "        return series"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now make a loop to execute 100 test runs with two emulated instruments, and log the results with a relational SQLite database. I do a little setup to start:\n",
    "\n",
    "1. Define a couple of functions `inst1_trace` and `inst2_trace` that collect my data\n",
    "2. Instantiate 2 instruments, `inst1` and `inst2`\n",
    "3. Instantiate the logger with `lb.SQLiteLogger('test.db', 'state')`.\n",
    "   The arguments specify the name of the sqlite database file and the name of the table where the following will be stored: 1) the instrument state info will be stored, 2) locations of data files, and 3) any extra comments we add with `db.write()`.\n",
    "\n",
    "Remember that use of the `with` statement automatically connects to the instruments, and then ensures that the instruments are properly closed when we leave the `with` block (even if there is an exception)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "..\\labbench\\data.py:841: UserWarning: set_nonscalar_file_type is deprecated; set when creating\n",
      "                         the database object instead with the nonscalar_output flag\n",
      "  the database object instead with the nonscalar_output flag\"\"\")\n"
     ]
    }
   ],
   "source": [
    "def inst1_trace ():\n",
    "    \"\"\" Return a 1001-point trace\n",
    "    \"\"\"\n",
    "    inst1.trigger()\n",
    "    return inst1.fetch_trace(51)\n",
    "\n",
    "def inst2_trace ():\n",
    "    \"\"\" This one returns only one point\n",
    "    \"\"\"\n",
    "    inst2.trigger()\n",
    "    return inst2.fetch_trace(1).values[0]\n",
    "    \n",
    "# Root directory of the database\n",
    "db_path = r'data'\n",
    "\n",
    "# Seed the data dictionary with some global data\n",
    "data = {'dut': 'DUT 15'}\n",
    "\n",
    "Nfreqs = 101\n",
    "\n",
    "with EmulatedInstrument()        as inst1,\\\n",
    "     EmulatedInstrument()        as inst2,\\\n",
    "     lb.SQLiteLogger(db_path)  as db:\n",
    "        # Catch any changes in inst1.state and inst2.state\n",
    "        db.observe_states([inst1,inst2])  \n",
    "        \n",
    "        # Update inst1.state.sweep_aperture on each db.append\n",
    "        db.observe_states(inst1, always='sweep_aperture')\n",
    "        \n",
    "        # Store trace data in csv format\n",
    "        db.set_relational_file_format('csv')\n",
    "        \n",
    "        # Perform a frequency sweep. The frequency will be logged to the\n",
    "        # database, because we configured it to observe all state changes.\n",
    "        inst2.state.frequency = 5.8e9\n",
    "        for inst1.state.frequency in np.linspace(5.8e9, 5.9e9, Nfreqs):                    \n",
    "            # Collect \"test data\" by concurrently calling\n",
    "            # inst1_trace and inst2_trace\n",
    "            data.update(lb.concurrently(inst1_trace, inst2_trace))\n",
    "\n",
    "            # Append the new data as a row to the database.\n",
    "            # Each key is a column in the database (which will be added\n",
    "            # dynamically to the database if needed). More keys and values\n",
    "            # are also added corresponding to attributes inst1.state and inst2.state\n",
    "            db.append(comments='trying for 1.21 GW to time travel',\n",
    "                      **data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Reading and exploring the data\n",
    "The master database is now populated with the test results and subdirectories are populated with trace data. `labbench` provides the function `read` as a shortcut to load the sqlite database into a pandas dataframe. Each state is a column in the database. The logger creates columns named as a combination of the device name ('inst1') and name of the corresponding device state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>comments</th>\n",
       "      <th>dut</th>\n",
       "      <th>host_log</th>\n",
       "      <th>host_time</th>\n",
       "      <th>inst1_frequency</th>\n",
       "      <th>inst1_sweep_aperture</th>\n",
       "      <th>inst1_trace</th>\n",
       "      <th>inst2_frequency</th>\n",
       "      <th>inst2_sweep_aperture</th>\n",
       "      <th>inst2_trace</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trying for 1.21 GW to time travel</td>\n",
       "      <td>DUT 15</td>\n",
       "      <td>0 2019-06-26 112657.415229\\host_log.txt</td>\n",
       "      <td>2019-06-26 11:26:57.415229</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0.178945</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0.184968</td>\n",
       "      <td>1.833018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>trying for 1.21 GW to time travel</td>\n",
       "      <td>DUT 15</td>\n",
       "      <td>1 2019-06-26 112657.416226\\host_log.txt</td>\n",
       "      <td>2019-06-26 11:26:57.416226</td>\n",
       "      <td>5.801000e+09</td>\n",
       "      <td>0.045648</td>\n",
       "      <td>1 2019-06-26 112657.416226\\inst1_trace.csv</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0.086791</td>\n",
       "      <td>-0.099672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>trying for 1.21 GW to time travel</td>\n",
       "      <td>DUT 15</td>\n",
       "      <td>2 2019-06-26 112657.418228\\host_log.txt</td>\n",
       "      <td>2019-06-26 11:26:57.418228</td>\n",
       "      <td>5.802000e+09</td>\n",
       "      <td>0.010702</td>\n",
       "      <td>2 2019-06-26 112657.418228\\inst1_trace.csv</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0.039928</td>\n",
       "      <td>-1.026572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>trying for 1.21 GW to time travel</td>\n",
       "      <td>DUT 15</td>\n",
       "      <td>3 2019-06-26 112657.419227\\host_log.txt</td>\n",
       "      <td>2019-06-26 11:26:57.419227</td>\n",
       "      <td>5.803000e+09</td>\n",
       "      <td>0.155814</td>\n",
       "      <td>3 2019-06-26 112657.419227\\inst1_trace.csv</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0.148706</td>\n",
       "      <td>0.692184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>trying for 1.21 GW to time travel</td>\n",
       "      <td>DUT 15</td>\n",
       "      <td>4 2019-06-26 112657.420241\\host_log.txt</td>\n",
       "      <td>2019-06-26 11:26:57.420241</td>\n",
       "      <td>5.804000e+09</td>\n",
       "      <td>0.180664</td>\n",
       "      <td>4 2019-06-26 112657.420241\\inst1_trace.csv</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0.142890</td>\n",
       "      <td>-1.635934</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             comments     dut  \\\n",
       "id                                              \n",
       "0   trying for 1.21 GW to time travel  DUT 15   \n",
       "1   trying for 1.21 GW to time travel  DUT 15   \n",
       "2   trying for 1.21 GW to time travel  DUT 15   \n",
       "3   trying for 1.21 GW to time travel  DUT 15   \n",
       "4   trying for 1.21 GW to time travel  DUT 15   \n",
       "\n",
       "                                   host_log                   host_time  \\\n",
       "id                                                                        \n",
       "0   0 2019-06-26 112657.415229\\host_log.txt  2019-06-26 11:26:57.415229   \n",
       "1   1 2019-06-26 112657.416226\\host_log.txt  2019-06-26 11:26:57.416226   \n",
       "2   2 2019-06-26 112657.418228\\host_log.txt  2019-06-26 11:26:57.418228   \n",
       "3   3 2019-06-26 112657.419227\\host_log.txt  2019-06-26 11:26:57.419227   \n",
       "4   4 2019-06-26 112657.420241\\host_log.txt  2019-06-26 11:26:57.420241   \n",
       "\n",
       "    inst1_frequency  inst1_sweep_aperture  \\\n",
       "id                                          \n",
       "0      5.800000e+09              0.178945   \n",
       "1      5.801000e+09              0.045648   \n",
       "2      5.802000e+09              0.010702   \n",
       "3      5.803000e+09              0.155814   \n",
       "4      5.804000e+09              0.180664   \n",
       "\n",
       "                                   inst1_trace  inst2_frequency  \\\n",
       "id                                                                \n",
       "0   0 2019-06-26 112657.415229\\inst1_trace.csv     5.800000e+09   \n",
       "1   1 2019-06-26 112657.416226\\inst1_trace.csv     5.800000e+09   \n",
       "2   2 2019-06-26 112657.418228\\inst1_trace.csv     5.800000e+09   \n",
       "3   3 2019-06-26 112657.419227\\inst1_trace.csv     5.800000e+09   \n",
       "4   4 2019-06-26 112657.420241\\inst1_trace.csv     5.800000e+09   \n",
       "\n",
       "    inst2_sweep_aperture  inst2_trace  \n",
       "id                                     \n",
       "0               0.184968     1.833018  \n",
       "1               0.086791    -0.099672  \n",
       "2               0.039928    -1.026572  \n",
       "3               0.148706     0.692184  \n",
       "4               0.142890    -1.635934  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%pylab inline\n",
    "master = lb.read(f'{db_path}/master.db')\n",
    "master.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a pandas DataFrame object. There is extensive information about how to use dataframes [on the pandas website](http://pandas.pydata.org/pandas-docs/stable/). Suppose we want to bring in the data from the traces, which are in a collection of waveform files specified under the `inst1_trace` column. The function `labbench.expand` serves to flatten the database with respect to data files that were generated on each row."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dut</th>\n",
       "      <th>inst1_frequency</th>\n",
       "      <th>inst1_trace</th>\n",
       "      <th>inst1_trace_id</th>\n",
       "      <th>inst1_trace_time</th>\n",
       "      <th>inst1_trace_voltage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.353873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000849</td>\n",
       "      <td>0.778037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>2</td>\n",
       "      <td>0.001699</td>\n",
       "      <td>1.586201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>3</td>\n",
       "      <td>0.002548</td>\n",
       "      <td>-0.088197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>4</td>\n",
       "      <td>0.003397</td>\n",
       "      <td>0.144149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>5</td>\n",
       "      <td>0.004247</td>\n",
       "      <td>0.142975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>6</td>\n",
       "      <td>0.005096</td>\n",
       "      <td>-0.324535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>7</td>\n",
       "      <td>0.005945</td>\n",
       "      <td>1.900828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>8</td>\n",
       "      <td>0.006795</td>\n",
       "      <td>-0.685564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>9</td>\n",
       "      <td>0.007644</td>\n",
       "      <td>-0.889614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>10</td>\n",
       "      <td>0.008493</td>\n",
       "      <td>0.527775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>11</td>\n",
       "      <td>0.009343</td>\n",
       "      <td>-0.831135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>12</td>\n",
       "      <td>0.010192</td>\n",
       "      <td>0.196392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>13</td>\n",
       "      <td>0.011041</td>\n",
       "      <td>0.661497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>14</td>\n",
       "      <td>0.011891</td>\n",
       "      <td>1.032419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>15</td>\n",
       "      <td>0.012740</td>\n",
       "      <td>0.258957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>16</td>\n",
       "      <td>0.013589</td>\n",
       "      <td>-0.868437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>17</td>\n",
       "      <td>0.014439</td>\n",
       "      <td>0.460822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>18</td>\n",
       "      <td>0.015288</td>\n",
       "      <td>-1.503195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>19</td>\n",
       "      <td>0.016137</td>\n",
       "      <td>-1.182400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>20</td>\n",
       "      <td>0.016987</td>\n",
       "      <td>0.132486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>21</td>\n",
       "      <td>0.017836</td>\n",
       "      <td>-0.168882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>22</td>\n",
       "      <td>0.018685</td>\n",
       "      <td>-1.107198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>23</td>\n",
       "      <td>0.019535</td>\n",
       "      <td>-0.326377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>24</td>\n",
       "      <td>0.020384</td>\n",
       "      <td>-0.461302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>25</td>\n",
       "      <td>0.021233</td>\n",
       "      <td>-0.016560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>26</td>\n",
       "      <td>0.022083</td>\n",
       "      <td>-0.246392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>27</td>\n",
       "      <td>0.022932</td>\n",
       "      <td>-0.164883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>28</td>\n",
       "      <td>0.023781</td>\n",
       "      <td>-0.537337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.800000e+09</td>\n",
       "      <td>0 2019-06-26 112657.415229\\inst1_trace.csv</td>\n",
       "      <td>29</td>\n",
       "      <td>0.024631</td>\n",
       "      <td>-0.007081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5121</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>21</td>\n",
       "      <td>0.080807</td>\n",
       "      <td>0.742581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5122</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>22</td>\n",
       "      <td>0.084654</td>\n",
       "      <td>-0.674925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5123</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>23</td>\n",
       "      <td>0.088502</td>\n",
       "      <td>0.327832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5124</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>24</td>\n",
       "      <td>0.092350</td>\n",
       "      <td>1.471126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5125</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>25</td>\n",
       "      <td>0.096198</td>\n",
       "      <td>-0.133763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5126</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>26</td>\n",
       "      <td>0.100046</td>\n",
       "      <td>0.625860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5127</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>27</td>\n",
       "      <td>0.103894</td>\n",
       "      <td>0.154129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5128</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>28</td>\n",
       "      <td>0.107742</td>\n",
       "      <td>-0.905493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5129</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>29</td>\n",
       "      <td>0.111590</td>\n",
       "      <td>0.040421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5130</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>30</td>\n",
       "      <td>0.115438</td>\n",
       "      <td>-0.261152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5131</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>31</td>\n",
       "      <td>0.119286</td>\n",
       "      <td>-0.333401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5132</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>32</td>\n",
       "      <td>0.123134</td>\n",
       "      <td>-0.097314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5133</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>33</td>\n",
       "      <td>0.126982</td>\n",
       "      <td>0.263614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5134</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>34</td>\n",
       "      <td>0.130830</td>\n",
       "      <td>0.321361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5135</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>35</td>\n",
       "      <td>0.134678</td>\n",
       "      <td>-0.307449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5136</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>36</td>\n",
       "      <td>0.138525</td>\n",
       "      <td>0.437606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5137</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>37</td>\n",
       "      <td>0.142373</td>\n",
       "      <td>-0.512926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5138</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>38</td>\n",
       "      <td>0.146221</td>\n",
       "      <td>1.005609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5139</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>39</td>\n",
       "      <td>0.150069</td>\n",
       "      <td>0.273236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5140</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>40</td>\n",
       "      <td>0.153917</td>\n",
       "      <td>-0.274306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5141</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>41</td>\n",
       "      <td>0.157765</td>\n",
       "      <td>0.974446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5142</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>42</td>\n",
       "      <td>0.161613</td>\n",
       "      <td>1.196802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5143</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>43</td>\n",
       "      <td>0.165461</td>\n",
       "      <td>-1.151176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5144</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>44</td>\n",
       "      <td>0.169309</td>\n",
       "      <td>0.255143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5145</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>45</td>\n",
       "      <td>0.173157</td>\n",
       "      <td>-0.271001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5146</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>46</td>\n",
       "      <td>0.177005</td>\n",
       "      <td>-0.221826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5147</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>47</td>\n",
       "      <td>0.180853</td>\n",
       "      <td>-0.037811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5148</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>48</td>\n",
       "      <td>0.184701</td>\n",
       "      <td>-0.286925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5149</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>49</td>\n",
       "      <td>0.188549</td>\n",
       "      <td>-0.254916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5150</th>\n",
       "      <td>DUT 15</td>\n",
       "      <td>5.900000e+09</td>\n",
       "      <td>100 2019-06-26 112657.549225\\inst1_trace.csv</td>\n",
       "      <td>50</td>\n",
       "      <td>0.192396</td>\n",
       "      <td>0.366316</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5151 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         dut  inst1_frequency                                   inst1_trace  \\\n",
       "0     DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "1     DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "2     DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "3     DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "4     DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "5     DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "6     DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "7     DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "8     DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "9     DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "10    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "11    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "12    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "13    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "14    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "15    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "16    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "17    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "18    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "19    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "20    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "21    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "22    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "23    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "24    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "25    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "26    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "27    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "28    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "29    DUT 15     5.800000e+09    0 2019-06-26 112657.415229\\inst1_trace.csv   \n",
       "...      ...              ...                                           ...   \n",
       "5121  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5122  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5123  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5124  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5125  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5126  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5127  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5128  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5129  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5130  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5131  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5132  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5133  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5134  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5135  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5136  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5137  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5138  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5139  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5140  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5141  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5142  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5143  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5144  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5145  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5146  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5147  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5148  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5149  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "5150  DUT 15     5.900000e+09  100 2019-06-26 112657.549225\\inst1_trace.csv   \n",
       "\n",
       "      inst1_trace_id  inst1_trace_time  inst1_trace_voltage  \n",
       "0                  0          0.000000            -0.353873  \n",
       "1                  1          0.000849             0.778037  \n",
       "2                  2          0.001699             1.586201  \n",
       "3                  3          0.002548            -0.088197  \n",
       "4                  4          0.003397             0.144149  \n",
       "5                  5          0.004247             0.142975  \n",
       "6                  6          0.005096            -0.324535  \n",
       "7                  7          0.005945             1.900828  \n",
       "8                  8          0.006795            -0.685564  \n",
       "9                  9          0.007644            -0.889614  \n",
       "10                10          0.008493             0.527775  \n",
       "11                11          0.009343            -0.831135  \n",
       "12                12          0.010192             0.196392  \n",
       "13                13          0.011041             0.661497  \n",
       "14                14          0.011891             1.032419  \n",
       "15                15          0.012740             0.258957  \n",
       "16                16          0.013589            -0.868437  \n",
       "17                17          0.014439             0.460822  \n",
       "18                18          0.015288            -1.503195  \n",
       "19                19          0.016137            -1.182400  \n",
       "20                20          0.016987             0.132486  \n",
       "21                21          0.017836            -0.168882  \n",
       "22                22          0.018685            -1.107198  \n",
       "23                23          0.019535            -0.326377  \n",
       "24                24          0.020384            -0.461302  \n",
       "25                25          0.021233            -0.016560  \n",
       "26                26          0.022083            -0.246392  \n",
       "27                27          0.022932            -0.164883  \n",
       "28                28          0.023781            -0.537337  \n",
       "29                29          0.024631            -0.007081  \n",
       "...              ...               ...                  ...  \n",
       "5121              21          0.080807             0.742581  \n",
       "5122              22          0.084654            -0.674925  \n",
       "5123              23          0.088502             0.327832  \n",
       "5124              24          0.092350             1.471126  \n",
       "5125              25          0.096198            -0.133763  \n",
       "5126              26          0.100046             0.625860  \n",
       "5127              27          0.103894             0.154129  \n",
       "5128              28          0.107742            -0.905493  \n",
       "5129              29          0.111590             0.040421  \n",
       "5130              30          0.115438            -0.261152  \n",
       "5131              31          0.119286            -0.333401  \n",
       "5132              32          0.123134            -0.097314  \n",
       "5133              33          0.126982             0.263614  \n",
       "5134              34          0.130830             0.321361  \n",
       "5135              35          0.134678            -0.307449  \n",
       "5136              36          0.138525             0.437606  \n",
       "5137              37          0.142373            -0.512926  \n",
       "5138              38          0.146221             1.005609  \n",
       "5139              39          0.150069             0.273236  \n",
       "5140              40          0.153917            -0.274306  \n",
       "5141              41          0.157765             0.974446  \n",
       "5142              42          0.161613             1.196802  \n",
       "5143              43          0.165461            -1.151176  \n",
       "5144              44          0.169309             0.255143  \n",
       "5145              45          0.173157            -0.271001  \n",
       "5146              46          0.177005            -0.221826  \n",
       "5147              47          0.180853            -0.037811  \n",
       "5148              48          0.184701            -0.286925  \n",
       "5149              49          0.188549            -0.254916  \n",
       "5150              50          0.192396             0.366316  \n",
       "\n",
       "[5151 rows x 6 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "waveforms = lb.read_relational(f'{db_path}/master.db', 'inst1_trace', ['dut', 'inst1_frequency'])\n",
    "waveforms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "now we can manipulate the results to look for meaningful information in the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Voltage (arb units)')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "output_type": "displaydata"
    }
   ],
   "source": [
    "import seaborn as sns; sns.set(context='notebook', style='ticks', font_scale=1.5) # Theme stuff\n",
    "\n",
    "waveforms.plot(x='inst1_frequency',y='inst1_trace_voltage',kind='hexbin')\n",
    "xlabel('Frequency (Hz)')\n",
    "ylabel('Voltage (arb units)')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
